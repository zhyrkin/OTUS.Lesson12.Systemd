---
- name: 'Написать service, который будет раз в 30 секунд мониторить лог на предмет наличия ключевого слова'
  hosts: test-host
  gather_facts: no
  become: true
  become_user: root
  become_method: sudo

  roles:
    - role: update_cache
    - role: install_utils
      vars:
        utils:
          - rsyslog

    - name: copy watchlog.sh
      role: copy_file
      vars: 
        source: watchlog.sh
        dest: /opt/watchlog.sh
        mode: '0755'


    - name: create file whith variables
      role: create_conf_file 
      vars:
        path: /etc/default/watchlog
        config_text: |
          WORD="ALERT"
          LOG=/var/log/watchlog.log
    

    - name: create unit for service
      role: create_conf_file
      vars:
        service_name: watchlog.service
        path: '/etc/systemd/system/{{ service_name }}'
        config_text: |
          [Unit]
          Description=My watchlog service

          [Service]
          Type=oneshot
          EnvironmentFile=/etc/default/watchlog
          ExecStart=/opt/watchlog.sh $WORD $LOG
    

    - name: create unit for timer
      role: create_conf_file
      vars:
        service_name: watchlog.timer
        path: '/etc/systemd/system/{{ service_name }}'
        config_text: |
          [Unit]
          Description=Run watchlog script every 30 second

          [Timer]
          # Run every 30 second
          OnUnitActiveSec=30
          Unit=watchlog.service

          [Install]
          WantedBy=multi-user.target
      

  post_tasks:
    - name: create test log-file
      ansible.builtin.file:
        state: touch
        path: /var/log/watchlog.log

    - name: restart services
      ansible.builtin.systemd_service:
        state: restarted
        name: watchlog.timer

    - name: restart services
      ansible.builtin.systemd_service:
        state: restarted
        name: watchlog.service
    
    - name: fill the test log-file with data
      ansible.builtin.lineinfile:
        path: /var/log/watchlog.log
        line: 'ALERT: Андрюха, у нас труп! Возможно криминал. По коням!'
        state: present

- name: 'Установить spawn-fcgi и создать unit-файл (spawn-fcgi.sevice) с помощью переделки init-скрипта'
  hosts: test-host
  gather_facts: no
  become: true
  become_user: root
  become_method: sudo

  pre_tasks:
    - name: create dir /etc/spawn-fcgi/
      ansible.builtin.file:
        path: /etc/spawn-fcgi
        state: directory
        mode: '0755'
  roles:
    - role: update_cache
    - role: install_utils
      vars:
        utils:
          - spawn-fcgi
          - php 
          - php-cgi 
          - php-cli
          - apache2 
          - libapache2-mod-fcgid
      
    - role: create_conf_file
      vars:
        path: /etc/spawn-fcgi/fcgi.conf
        config_text: |
          SOCKET=/var/run/php-fcgi.sock
          OPTIONS="-u www-data -g www-data -s $SOCKET -S -M 0600 -C 32 -F 1 -- /usr/bin/php-cgi"
    
    - role: create_conf_file
      vars: 
        service_name: spawn-fcgi.service
        path: '/etc/systemd/system/{{ service_name }}'
        config_text: |
          [Unit]
          Description=Spawn-fcgi startup service by Otus
          After=network.target

          [Service]
          Type=simple
          PIDFile=/var/run/spawn-fcgi.pid
          EnvironmentFile=/etc/spawn-fcgi/fcgi.conf
          ExecStart=/usr/bin/spawn-fcgi -n $OPTIONS
          KillMode=process

          [Install]
          WantedBy=multi-user.target
  post_tasks:
    - name: restart services
      ansible.builtin.systemd_service:
        state: restarted
        name: spawn-fcgi.service

    - name: register systemctl status spawn-fcgi
      ansible.builtin.shell:
        'systemctl status spawn-fcgi'
      register: status
    
    - name: show systemctl status spawn-fcgi
      debug: 
        msg: '{{ status }}'

- name: 'Доработать unit-файл Nginx (nginx.service) для запуска нескольких инстансов сервера с разными конфигурационными файлами одновременно'
  hosts: test-host
  gather_facts: no
  become: true
  become_user: root
  become_method: sudo

  roles:
    - role: create_conf_file
      vars:
        service_name: nginx@.service
        path: '/etc/systemd/system/{{ service_name }}'
        config_text: |
          # Stop dance for nginx
          # =======================
          #
          # ExecStop sends SIGSTOP (graceful stop) to the nginx process.
          # If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control
          # and sends SIGTERM (fast shutdown) to the main process.
          # After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends
          # SIGKILL to all the remaining processes in the process group (KillMode=mixed).
          #
          # nginx signals reference doc:
          # http://nginx.org/en/docs/control.html
          #
          [Unit]
          Description=A high performance web server and a reverse proxy server
          Documentation=man:nginx(8)
          After=network.target nss-lookup.target

          [Service]
          Type=forking
          PIDFile=/run/nginx-%I.pid
          ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx-%I.conf -q -g 'daemon on; master_process on;'
          ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx-%I.conf -g 'daemon on; master_process on;'
          ExecReload=/usr/sbin/nginx -c /etc/nginx/nginx-%I.conf -g 'daemon on; master_process on;' -s reload
          ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx-%I.pid
          TimeoutStopSec=5
          KillMode=mixed

          [Install]
          WantedBy=multi-user.target

    - role: install_nginx
      vars:
        instance:
          - name: first
            nginx_listen_port: 9001
          - name: second
            nginx_listen_port: 9002
